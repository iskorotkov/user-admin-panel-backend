/*
 * API for user admin panel
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: korotkov.ivan.s@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

type NewUser struct {
	Name string `json:"name"`

	Phone string `json:"phone"`

	Email string `json:"email"`

	// We have more than 2 options for genders as some users won't be comfortable specifying their gender, and some users define themselves as non-binary
	Gender string `json:"gender"`
}

// AssertNewUserRequired checks if the required fields are not zero-ed
func AssertNewUserRequired(obj NewUser) error {
	elements := map[string]interface{}{
		"name":   obj.Name,
		"phone":  obj.Phone,
		"email":  obj.Email,
		"gender": obj.Gender,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseNewUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NewUser (e.g. [][]NewUser), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseNewUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNewUser, ok := obj.(NewUser)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertNewUserRequired(aNewUser)
	})
}
