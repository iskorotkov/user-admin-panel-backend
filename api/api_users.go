/*
 * API for user admin panel
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: korotkov.ivan.s@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UsersApiController binds http requests to an api service and writes the service results to the http response
type UsersApiController struct {
	service      UsersApiServicer
	errorHandler ErrorHandler
}

// UsersApiOption for how the controller is set up.
type UsersApiOption func(*UsersApiController)

// WithUsersApiErrorHandler inject ErrorHandler into controller
func WithUsersApiErrorHandler(h ErrorHandler) UsersApiOption {
	return func(c *UsersApiController) {
		c.errorHandler = h
	}
}

// NewUsersApiController creates a default api controller
func NewUsersApiController(s UsersApiServicer, opts ...UsersApiOption) Router {
	controller := &UsersApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersApiController
func (c *UsersApiController) Routes() Routes {
	return Routes{
		{
			"All",
			strings.ToUpper("Get"),
			"/api/v1/users",
			c.All,
		},
		{
			"Create",
			strings.ToUpper("Post"),
			"/api/v1/users",
			c.Create,
		},
		{
			"Delete",
			strings.ToUpper("Delete"),
			"/api/v1/users/{id}",
			c.Delete,
		},
		{
			"Single",
			strings.ToUpper("Get"),
			"/api/v1/users/{id}",
			c.Single,
		},
		{
			"Update",
			strings.ToUpper("Put"),
			"/api/v1/users/{id}",
			c.Update,
		},
	}
}

// All -
func (c *UsersApiController) All(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.All(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// Create -
func (c *UsersApiController) Create(w http.ResponseWriter, r *http.Request) {
	newUserParam := NewUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newUserParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewUserRequired(newUserParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Create(r.Context(), newUserParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// Delete -
func (c *UsersApiController) Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.Delete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// Single -
func (c *UsersApiController) Single(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.Single(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// Update -
func (c *UsersApiController) Update(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	userParam := User{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Update(r.Context(), idParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
